# -*- coding: utf-8 -*-
"""standard_perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hmDkdYmInLrI3QyU5xyDz13df5sZFrI_
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

def preprocess_data(df):
    df = df.replace('?', np.nan)
    for column in df.columns:
        if df[column].dtype == 'object':
            df[column] = df[column].fillna(df[column].mode()[0])
        else:
            df[column] = df[column].fillna(df[column].mean())

    categorical_columns = df.select_dtypes(include=['object']).columns
    for column in categorical_columns:
        le = LabelEncoder()
        df[column] = le.fit_transform(df[column].astype(str))

    return df

def main():
    train_data = pd.read_csv('/ML2024F/train_final.csv')
    test_data = pd.read_csv('/ML2024F/test_final.csv')

    print("Train data columns:", train_data.columns)
    print("Test data columns:", test_data.columns)

    train_data = preprocess_data(train_data)
    test_data = preprocess_data(test_data)

    target_column = 'income>50K'
    X_train = train_data.drop(target_column, axis=1).values
    y_train = train_data[target_column].values

    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)

    test_ids = test_data['ID']
    X_test = test_data.drop(['ID'], axis=1).values
    X_test = scaler.transform(X_test)

    X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

    model = LogisticRegression(max_iter=1000, random_state=42)
    model.fit(X_train, y_train)

    y_val_pred = model.predict(X_val)
    val_accuracy = accuracy_score(y_val, y_val_pred)
    print(f"Accuracy on Validation Set: {val_accuracy:.4f}")

    y_test_pred_proba = model.predict_proba(X_test)[:, 1]

    output_df = pd.DataFrame({'ID': test_ids, 'Probability': y_test_pred_proba})
    output_df.to_csv('submission.csv', index=False)
    print("Predictions saved to 'submission.csv'.")

if __name__ == "__main__":
    main()

# standard perceptron