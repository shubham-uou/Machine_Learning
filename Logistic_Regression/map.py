# -*- coding: utf-8 -*-
"""MAP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/198jWXf6zEw8Ag0rfTgBouwQ3iDhDygPD
"""

import numpy as np

def load_data(train_file, test_file):
    train_data = np.loadtxt(train_file, delimiter=',')
    test_data = np.loadtxt(test_file, delimiter=',')
    X_train, y_train = train_data[:, :-1], train_data[:, -1]
    X_test, y_test = test_data[:, :-1], test_data[:, -1]
    y_train = y_train * 2 - 1
    y_test = y_test * 2 - 1
    return X_train, y_train, X_test, y_test

def sigmoid(z):
    return np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))

def compute_loss(w, X, y, v):
    m = X.shape[0]
    predictions = np.clip(sigmoid(X @ w), 1e-8, 1 - 1e-8)
    log_loss = -np.sum(y * np.log(predictions) + (1 - y) * np.log(1 - predictions)) / m
    regularization = np.sum(w**2) / (2 * (v + 1e-8))
    return log_loss + regularization

def compute_gradient(w, X, y, v):
    m = X.shape[0]
    predictions = sigmoid(X @ w)
    gradient = (X.T @ (predictions - y)) / m
    regularization_grad = w / (v + 1e-8)
    return gradient + regularization_grad

def logistic_regression_with_map(X_train, y_train, X_test, y_test, v_values, gamma_0, d, T):
    n_features = X_train.shape[1]
    results = {}

    for v in v_values:
        w = np.zeros(n_features)
        losses = []

        for epoch in range(T):
            indices = np.random.permutation(X_train.shape[0])
            X_train = X_train[indices]
            y_train = y_train[indices]

            for i in range(X_train.shape[0]):
                gamma_t = gamma_0 / (1 + (gamma_0 / d) * epoch)
                gradient = compute_gradient(w, X_train[i:i+1], y_train[i:i+1], v)
                w -= gamma_t * gradient

            loss = compute_loss(w, X_train, y_train, v)
            losses.append(loss)

        test_predictions = sigmoid(X_test @ w) >= 0.5
        test_accuracy = np.mean(test_predictions == (y_test > 0))

        results[v] = {"weights": w, "losses": losses, "test_accuracy": test_accuracy}
        print(f"Variance: {v}, Test Accuracy: {test_accuracy:.4f}")

    return results

train_file = 'datasets/bank-note/train.csv'
test_file = 'datasets/bank-note/test.csv'
X_train, y_train, X_test, y_test = load_data(train_file, test_file)

v_values = [0.01, 0.1, 0.5, 1, 3, 5, 10, 100]
gamma_0 = 0.1
d = 1
T = 100

results = logistic_regression_with_map(X_train, y_train, X_test, y_test, v_values, gamma_0, d, T)