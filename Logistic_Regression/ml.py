# -*- coding: utf-8 -*-
"""ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rpy0OJdhpnV5U8WnwBX8NZaVN3TRA7At
"""

import numpy as np

def load_banknote_data():
    train_data = np.loadtxt('datasets/bank-note/train.csv', delimiter=',')
    test_data = np.loadtxt('datasets/bank-note/test.csv', delimiter=',')

    X_train, y_train = train_data[:, :-1], train_data[:, -1]
    X_test, y_test = test_data[:, :-1], test_data[:, -1]

    X_train = (X_train - np.mean(X_train, axis=0)) / np.std(X_train, axis=0)
    X_test = (X_test - np.mean(X_test, axis=0)) / np.std(X_test, axis=0)

    y_train = (y_train == 1).astype(int)
    y_test = (y_test == 1).astype(int)

    return X_train, y_train, X_test, y_test

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

def compute_loss(X, y, w):
    m = len(y)
    predictions = sigmoid(np.dot(X, w))
    log_loss = -np.sum(y * np.log(predictions + 1e-8) + (1 - y) * np.log(1 - predictions + 1e-8)) / m
    return log_loss

def compute_gradient(X, y, w):
    m = len(y)
    predictions = sigmoid(np.dot(X, w))
    gradient = np.dot(X.T, (predictions - y)) / m
    return gradient

def logistic_regression_ml(X_train, y_train, X_test, y_test, gamma_0, d, T=100):
    w = np.zeros(X_train.shape[1])
    m = len(y_train)
    train_errors, test_errors = [], []

    for epoch in range(T):
        indices = np.random.permutation(m)
        X_train, y_train = X_train[indices], y_train[indices]

        for i in range(m):
            gamma_t = gamma_0 / (1 + (gamma_0 / d) * epoch)
            gradient = compute_gradient(X_train[i:i+1], y_train[i:i+1], w)
            w -= gamma_t * gradient

        train_loss = compute_loss(X_train, y_train, w)
        test_loss = compute_loss(X_test, y_test, w)
        train_errors.append(train_loss)
        test_errors.append(test_loss)
        print(f"Epoch {epoch+1}, Train Loss: {train_loss:.4f}, Test Loss: {test_loss:.4f}")

    test_predictions = sigmoid(np.dot(X_test, w)) >= 0.5
    test_accuracy = np.mean(test_predictions == y_test)
    print(f"Final Test Accuracy: {test_accuracy:.4f}")

    return w, train_errors, test_errors

X_train, y_train, X_test, y_test = load_banknote_data()

gamma_0 = 0.1
d = 10
T = 100

w, train_errors, test_errors = logistic_regression_ml(X_train, y_train, X_test, y_test, gamma_0, d, T)