# -*- coding: utf-8 -*-
"""voted_perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PvZGqx-DtxsOX4QQyV-85972xXGJpaJv
"""

import numpy as np
import pandas as pd

train_file_path = 'datasets/bank-note/train.csv'
test_file_path = 'datasets/bank-note/test.csv'
train_data = pd.read_csv(train_file_path, header=None)
test_data = pd.read_csv(test_file_path, header=None)

X_train = train_data.iloc[:, :-1].values.astype(float)
y_train = train_data.iloc[:, -1].values
X_test = test_data.iloc[:, :-1].values.astype(float)
y_test = test_data.iloc[:, -1].values

y_train = np.where(y_train == 0, -1, 1)
y_test = np.where(y_test == 0, -1, 1)

weights = np.zeros(X_train.shape[1])
learning_rate = 0.01
max_epochs = 10

weight_vectors = []
counts = []
current_count = 1

for epoch in range(max_epochs):
    for i in range(len(X_train)):
        if y_train[i] * np.dot(X_train[i], weights) <= 0:
            weight_vectors.append(weights.copy())
            counts.append(current_count)
            weights += learning_rate * y_train[i] * X_train[i]
            current_count = 1
        else:
            current_count += 1

weight_vectors.append(weights.copy())
counts.append(current_count)

def voted_predict(X, weight_vectors, counts):
    final_prediction = np.zeros(X.shape[0])
    for w, c in zip(weight_vectors, counts):
        final_prediction += c * np.sign(X.dot(w))
    return np.sign(final_prediction)

y_pred = voted_predict(X_test, weight_vectors, counts)

average_error = np.mean(y_pred != y_test)

print("Distinct weight vectors and their counts:")
for w, c in zip(weight_vectors, counts):
    print(f"Weights: {w}, Count: {c}")
print("Average prediction error on test dataset:", average_error)